// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String    @id @default(uuid()) @db.Char(36)
  username             String    @unique @db.VarChar(50)
  email                String    @unique @db.VarChar(255)
  passwordHash         String    @map("password_hash") @db.VarChar(255)
  verified             Boolean?   @default(false)
  firstName            String?   @map("first_name") @db.VarChar(50)
  lastName             String?   @map("last_name") @db.VarChar(50)
  isActive             Boolean   @default(false) @map("is_active")
  isEmailVerified      Boolean   @default(false) @map("is_email_verified")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  lastLogin            DateTime? @map("last_login")
  failedLoginAttempts  Int       @default(0) @map("failed_login_attempts")
  lastFailedLogin      DateTime? @map("last_failed_login")
  accountLockedUntil   DateTime? @map("account_locked_until")
  passwordResetToken   String?   @unique @map("password_reset_token") @db.VarChar(255)
  passwordResetExpires DateTime? @map("password_reset_expires")

  roles             UserRole[]
  emailVerification EmailVerificationToken?
  twoFactorAuth     TwoFactorAuth?
  accessTokens      AccessToken[]
  refreshTokens     RefreshToken[]
  auditLogs         AuditLog[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement()) 
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model UserRole {
  userId     String   @map("user_id") @db.Char(36)
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          Int      @id @default(autoincrement()) 
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int      @map("role_id") 
  permissionId Int      @map("permission_id") 
  assignedAt   DateTime @default(now()) @map("assigned_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model EmailVerificationToken {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @unique @map("user_id") @db.Char(36)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("email_verification_tokens")
}

model TwoFactorAuth {
  userId      String   @id @map("user_id") @db.Char(36)
  secretKey   String   @map("secret_key") @db.VarChar(32)
  isEnabled   Boolean  @default(false) @map("is_enabled")
  backupCodes Json?    @map("backup_codes")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model AccessToken {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @map("user_id") @db.Char(36)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("access_tokens")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @map("user_id") @db.Char(36)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("refresh_tokens")
}

model TokenBlacklist {
  token         String   @id @db.VarChar(255)
  blacklistedAt DateTime @default(now()) @map("blacklisted_at")
  expiresAt     DateTime @map("expires_at")

  @@index([expiresAt])
  @@map("token_blacklist")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String?  @map("user_id") @db.Char(36)
  action    String   @db.VarChar(100)
  details   Json?
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_log")
}
